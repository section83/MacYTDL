-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------  MacYTDL--  A GUI for the Python Script youtube-dl (http://rg3.github.io/youtube-dl/).  Many thanks to Shane Stanley--  This is the Adviser - advises user when download complete - give options if download failed----------------------------------------------------------------------------------------------------------------------------------------------------------------------------- Include librariesuse AppleScript version "2.4" -- Yosemite (10.10) or lateruse scripting additions-- This script provides an Adviser for each video file download requested by user in Main Dialog - it is called by monitor.sctpon run {monitor_pid, youtubedl_pid, MacYTDL_custom_icon_file_not_posix_monitor_quoted, MacYTDL_preferences_path_monitor, YTDL_response_file_monitor, downloadsFolder_Path_monitor, diag_Title_quoted_monitor, DL_description_monitor, download_filename_monitor, download_filename_new_monitor, download_filename_new_monitor_plain, YTDL_simulate_response_monitor}		--*********************************************	-- dialog for checking values passed from Monitor script	-- display dialog "monitor_pid: " & monitor_pid & return & "youtubedl_pid: " & youtubedl_pid & return & "MacYTDL_custom_icon_file_not_posix_monitor_quoted: " & MacYTDL_custom_icon_file_not_posix_monitor_quoted & return & "MacYTDL_preferences_path_monitor: " & MacYTDL_preferences_path_monitor & return & "YTDL_response_file_monitor: " & YTDL_response_file_monitor & return & "downloadsFolder_Path_monitor: " & downloadsFolder_Path_monitor & return & "diag_Title_quoted_monitor: " & diag_Title_quoted_monitor & return & "DL_description_monitor: " & DL_description_monitor & return & "download_filename_monitor: \"" & download_filename_monitor & "\"" & return & "download_filename_new_monitor: " & download_filename_new_monitor & return & "download_filename_new_monitor_plain: " & download_filename_new_monitor_plain & return & "YTDL_simulate_response_monitor: \"" & YTDL_simulate_response_monitor & "\"" with title "Adviser"	--*********************************************			-- Set variable to contain path to MacYTDL bundle - to enable localized text and Alerter tool to be found	set pathToBundle to (path to me) as text	set pathToBundleShort to text 1 thru -40 of pathToBundle	set alerterPath to POSIX path of (pathToBundleShort & "Contents:Resources:")		-- Set up to enable Adviser to open the log file	set YTDL_response_file_monitor to POSIX file YTDL_response_file_monitor		-- Some downloads come thru with multiple file names - isolate the first so it can be played when download finished	set num_paragraphs_file_name to count of paragraphs of download_filename_monitor	if num_paragraphs_file_name is greater than 1 then		repeat with find_paragraph in paragraphs of download_filename_monitor			if find_paragraph does not contain "ERROR:" and find_paragraph does not contain "WARNING:" then				set download_filename to find_paragraph				exit repeat			end if		end repeat		set download_filename_play to text 1 thru -1 of paragraph 1 of download_filename_monitor	else		set download_filename_play to download_filename_monitor	end if		-- Check download process every 2 seconds until it disappears from process list	try		repeat			-- does the PID exist?			do shell script "ps -p" & youtubedl_pid			delay 2		end repeat	on error		-- youtubedl_pid has disappeared - kill off the Monitor process, test for download error, advise user accordingly, open logs or downloads, or do nothing as desired		try			do shell script "kill " & monitor_pid		end try				-- Change extension of description file(s) to txt if description is requested by user and file exists - using shell has risks but is quick		if DL_description_monitor is "Yes" then			try				do shell script "for file in " & quoted form of downloadsFolder_Path_monitor & "/*.description; do mv \"$file\" \"${file/.description/.txt}\" > /dev/null 2> /dev/null ; done"			end try		end if				set theAdviserButtonsCloseLabel1 to localized string "Close" in bundle file pathToBundleShort		set subtitleText to quoted form of ("“" & download_filename_new_monitor_plain & "”")		-- Get response file content into a variable so it can be checked for the 100% - which if not present suggests there was a download error		try			set YTDL_response to read file YTDL_response_file_monitor as text		on error errMsg			display dialog "Error in reading response file: " & errMsg		end try		if YTDL_response contains "100%" and YTDL_response does not contain "ERROR:" then			-- Download completed without errors - if YTDL merged into mkv, update extension in download_filename_play - but not if user has chosen to recode			if YTDL_response contains "Requested formats are incompatible for merge and will be merged into mkv" and YTDL_response does not contain "Converting video from mkv to " then				set start_extension to offset of "." in download_filename_play				set download_filename_play to (text 1 thru start_extension of download_filename_play) & "mkv"			end if			set theAdviserTextLabel1 to quoted form of (localized string "MacYTDL download finished:" in bundle file pathToBundleShort)			set theAdviserTextLabel2 to quoted form of (localized string "Click to open downloads folder" in bundle file pathToBundleShort)			set theAdviserButtonsCloseLabel2 to localized string "Play" in bundle file pathToBundleShort			set adviser_button to do shell script alerterPath & "/alerter -message " & theAdviserTextLabel2 & " -title " & theAdviserTextLabel1 & " -subtitle " & subtitleText & " -closeLabel " & theAdviserButtonsCloseLabel1 & " -timeout 10 -sender com.apple.script.id.MacYTDL -actions " & theAdviserButtonsCloseLabel2			if adviser_button is theAdviserButtonsCloseLabel2 then				if download_filename_play is "No File Name" then					set theAdviserNoFileNameLabel to localized string "Sorry, can't play files from a batch download." in bundle file pathToBundleShort					display dialog theAdviserNoFileNameLabel buttons {theAdviserButtonsOKLabel} default button 1 with title diag_Title_quoted_monitor with icon file MacYTDL_custom_icon_file_not_posix_monitor_quoted giving up after 7				else					-- Did user specify download location in custom template - if so, downloadsFolder_Path_monitor can be omitted					if download_filename_play contains "Users" then						set pathToVideoFile to POSIX file (download_filename_play)					else						set pathToVideoFile to POSIX file (downloadsFolder_Path_monitor & "/" & download_filename_play)					end if					tell application "Finder"						open pathToVideoFile as alias					end tell				end if			else if adviser_button is "@CONTENTCLICKED" then				tell application "Finder"					activate					open (downloadsFolder_Path_monitor as POSIX file)					set the position of the front Finder window to {100, 100}				end tell			end if			if download_filename_new_monitor is "the saved batch" then				set batch_filename to "BatchFile.txt" as string				set batch_file to POSIX file (MacYTDL_preferences_path_monitor & batch_filename)				try					set batch_file_ref to missing value					set batch_file_ref to open for access file batch_file with write permission					set eof batch_file_ref to 0					close access batch_file_ref				on error batch_errMsg					display dialog "There was an error: " & batch_errMsg & "batch_file: " & batch_file buttons {"OK"} default button {"OK"}					try						close access batch_file_ref					end try				end try			end if		else if YTDL_response contains "ERROR:" then			-- Download had errors				set theAdviserTextLabel1 to quoted form of (localized string "MacYTDL download error with:" in bundle file pathToBundleShort)			set theAdviserTextLabel2 to quoted form of (localized string "Click to open downloads or Options" in bundle file pathToBundleShort)			set theAdviserButtonsCloseLabel2 to localized string "Options" in bundle file pathToBundleShort			set theAdviserButtonsCloseLabel3 to quoted form of (localized string "Open Log" in bundle file pathToBundleShort)			set theAdviserButtonsCloseLabel4 to quoted form of (localized string "Show Logs" in bundle file pathToBundleShort)			set adviser_button to do shell script alerterPath & "/alerter -message " & theAdviserTextLabel2 & " -title " & theAdviserTextLabel1 & " -subtitle " & subtitleText & " -closeLabel " & theAdviserButtonsCloseLabel1 & " -timeout 20 -sender com.apple.script.id.MacYTDL -actions " & theAdviserButtonsCloseLabel3 & "," & theAdviserButtonsCloseLabel4 & " -dropdownLabel " & theAdviserButtonsCloseLabel2			if adviser_button is text 2 thru -2 of theAdviserButtonsCloseLabel3 then				tell application "Finder"					open YTDL_response_file_monitor as alias				end tell			else if adviser_button is text 2 thru -2 of theAdviserButtonsCloseLabel4 then				tell application "Finder"					activate					open (MacYTDL_preferences_path_monitor as POSIX file)					set the position of the front Finder window to {100, 100}				end tell			else if adviser_button is "@CONTENTCLICKED" then				tell application "Finder"					activate					open (downloadsFolder_Path_monitor as POSIX file)					set the position of the front Finder window to {100, 100}				end tell			end if		else if YTDL_response does not contain "ERROR:" and YTDL_response does not contain "100%" then			-- Download not completed but no errors reported			set theAdviserTextLabel1 to quoted form of (localized string "MacYTDL download incomplete:" in bundle file pathToBundleShort)			set theAdviserTextLabel2 to quoted form of (localized string "Click \"Options\" to troubleshoot." in bundle file pathToBundleShort)			set theAdviserButtonsCloseLabel2 to localized string "Options" in bundle file pathToBundleShort			set theAdviserButtonsCloseLabel3 to quoted form of (localized string "Open Log" in bundle file pathToBundleShort)			set theAdviserButtonsCloseLabel4 to quoted form of (localized string "Show Logs" in bundle file pathToBundleShort)			set adviser_button to do shell script alerterPath & "/alerter -message " & theAdviserTextLabel2 & " -title " & theAdviserTextLabel1 & " -subtitle " & subtitleText & " -closeLabel " & theAdviserButtonsCloseLabel1 & " -timeout 20 -sender com.apple.script.id.MacYTDL -actions " & theAdviserButtonsCloseLabel3 & "," & theAdviserButtonsCloseLabel4 & " -dropdownLabel " & theAdviserButtonsCloseLabel2			if adviser_button is text 2 thru -2 of theAdviserButtonsCloseLabel3 then				tell application "Finder"					open YTDL_response_file_monitor as alias				end tell			else if adviser_button is text 2 thru -2 of theAdviserButtonsCloseLabel4 then				tell application "Finder"					activate					open (MacYTDL_preferences_path_monitor as POSIX file)					set the position of the front Finder window to {100, 100}				end tell			else if adviser_button is "@CONTENTCLICKED" then				tell application "Finder"					activate					open (downloadsFolder_Path_monitor as POSIX file)					set the position of the front Finder window to {100, 100}				end tell			end if		end if	end tryend run